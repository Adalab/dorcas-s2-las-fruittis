'use strict';
//userSelections para recoger en un array las selecciones del usuario
var userSelections = [];

//variables para eliminar los select
var parentDiv;
var parentSelect;

//función para crear y añadir contenido al html
function addContentToHtml() {
  //Apuntar al padre de Select, el div
  var parentDivSelect = document.querySelector('.js__select-container');

  //Declaraciones de variables de select y su contenido
  var newParentSelect = document.createElement('div');
  var newSelect = document.createElement('select');
  var newOption = document.createElement('option');
  var optionContent = document.createTextNode('HTML');

  //Declaraciones variables boton más div que lo contiene

  var newSelectButton = document.createElement('div');
  var newSelectButtonContent = document.createElement('i');

  //Bucle que recorre el array de userSelections (+ 1 para que aparezca 1 ya pintado al cargar la página) y añade los grupos de contenido
  for (var i = 0; i < userSelections.length + 1; i++) {
    //Insercion contenido en option, e insercion de option como contenido de select. Insercion de select dentro del div que es su padre
    newOption.appendChild(optionContent);
    newSelect.appendChild(newOption);
    newParentSelect.appendChild(newSelect);
    parentDivSelect.appendChild(newParentSelect);

    newParentSelect.classList.add('item__select-container');
    newSelect.classList.add('item__select');
    newOption.classList.add('js__option');

    //Insercion clase font-awesome en <i>, insercion <i> en <div>
    newSelectButtonContent.classList.add('fas');
    newSelectButtonContent.classList.add('fa-plus');
    newSelectButtonContent.classList.add('js__add');
    newSelectButton.appendChild(newSelectButtonContent);
    newSelectButton.classList.add('item__select-button');
    newParentSelect.appendChild(newSelectButton);
  }

  changeButton();
}

//función para cambiar el signo del botón dependiendo de las seleciones del usuario
function changeButton() {
  var button = document.querySelectorAll('.js__add');
  for (var i = 0; i < button.length; i++) {
    console.log('i = ' + i);

    if (userSelections.length === i) {
      button[i].classList.add('fa-plus');
      button[i].removeEventListener('click', removeSelect);
      button[i].addEventListener('click', addSelect);
    } else {
      button[i].classList.remove('fa-plus');
      button[i].classList.add('fa-minus');
      button[i].removeEventListener('click', addSelect);
      button[i].addEventListener('click', removeSelect);
    }
  }
  conectSelectWithCard();
}

//Llamada a la función que crea el contenido la primera vez
addContentToHtml();

//Función para añadir el contenido (hasta que las selecciones del usuario sean 3) y cambiar el signo del último botón
function addSelect(event) {
  console.log('estoy poniendo');

  var clickedElement = event.currentTarget;
  userSelections.push('option');
  console.log(userSelections);
  if (userSelections.length < 3) {
    addContentToHtml();
  } else if (userSelections.length === 3) {
    changeButton();
  }
}

//Función para quitar el contenido (de momento sólo quita el primer campo no el correspondiente al botón que se pincha)
function removeSelect() {
  console.log('estoy quitando');
  parentDiv = document.querySelector('.js__select-container');
  parentSelect = document.querySelector('.item__select-container');
  userSelections.splice(0, 1);
  console.log(userSelections);
  if (userSelections.length === 2) {
    changeButton();
  } else if (userSelections.length === 1) {
    parentDiv.removeChild(parentSelect);
    changeButton();
  } else if (userSelections.length === 0) {
    parentDiv.removeChild(parentSelect);
    changeButton();
  }
}

'use strict';
var nameCard= document.querySelector('.fill__input-name');
var nameInput=document.querySelector('.fill__input-job');

function writeData(event) {
  var guiltyElement = event.currentTarget;
  var targetID = guiltyElement.getAttribute('data-info');
  document.querySelector('#' + targetID).innerHTML = guiltyElement.value;
}
nameCard.addEventListener('keyup', writeData);
nameInput.addEventListener('keyup', writeData);

'use strict';
var fr = new FileReader();
var buttonImage=document.querySelector('.fill__input--addimgbutton');
var inputHidden=document.querySelector('#img-selector');
var imageCard= document.querySelector('.viewfinder__photo');
var miniImage=document.querySelector('.fill__input--miniimg');
function getImage(event){
  var myFile = event.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
}
function writeImage() {
  imageCard.style.backgroundImage= 'url('+ fr.result+')';
  miniImage.style.backgroundImage= 'url('+ fr.result+')';
}
function fakeFileClick() {
  inputHidden.click();
}
inputHidden.addEventListener('change', getImage);
buttonImage.addEventListener('click', fakeFileClick);

'use strict';
var i;
var j;
var collapsible=document.querySelectorAll('.collapsible');
var collapsibleTriggers=document.querySelectorAll('.collapsible__label');



function updateCollapsibles(e) {
  var parent = e.currentTarget.parentElement;

  if (parent.classList.contains('collapsible--visible')) {
    parent.classList.remove('collapsible--visible');
  } else {
    closeAllCollapsibles();
    parent.classList.add('collapsible--visible');

  }
}

function closeAllCollapsibles() {
  for (i = 0; i < collapsible.length; i++) {
    collapsible[i].classList.remove('collapsible--visible');
  }
}

for (j = 0; j < collapsibleTriggers.length; j++) {
  collapsibleTriggers[j].addEventListener('click', updateCollapsibles);
}

'use strict';

console.log('>> Ready :)');

'use strict';

var cardContainer = document.querySelector('.viewfinder');
var radiosGroup = document.querySelectorAll('.radiosGroup');
var radioRed = document.querySelector('.radio--red');
var radioGrey = document.querySelector('.radio--grey');
var radios = document.querySelectorAll('.radio');
var radioComic = document.querySelector('.radio--comic');
var radioMontserrat = document.querySelector('.radio--montserrat');

function init() {
  for(var i = 0; i < radiosGroup.length; i++) {
    radios[i].addEventListener('click', setStyles);
  }
}

function setStyles() {
  resetColor();
  if (radioRed.checked) {
    cardContainer.classList.add('viewfinder--red');
  } else if (radioGrey.checked) {
    cardContainer.classList.add('viewfinder--grey');
  } else {
    cardContainer.classList.add('viewfinder--blue');
  }
  if (radioComic.checked) {
    cardContainer.classList.add('comic');
  } else if (radioMontserrat.checked) {
    cardContainer.classList.add('montserrat');
  } else {
    cardContainer.classList.add('ubuntu');
  }
}

function resetColor() {
  cardContainer.classList.remove('viewfinder--red', 'viewfinder--grey', 'viewfinder--blue', 'comic', 'montserrat', 'ubuntu');
}

init();

'use strict';
var buttonReset= document.querySelector('.viewfinder__button-reset');
var resetName = document.getElementById('element-name');
var resetJob = document.getElementById('element-job');
var resetPhoto =document.querySelector('.viewfinder__photo');
var resetMiniPhoto = document.querySelector('.fill__input--miniimg');
var resetColor2=document.getElementById('viewfinder');
var resetFont = document.getElementById('viewfinder');


function resetForm (){
  document.getElementById('fill__form--itemscontainer').reset();
  resetCard();
}
function resetCard (){
  resetName.innerHTML='Nombre Apellido';
  resetJob.innerHTML='Front-end developer';
  // las imagenes de la card y la pequeña del formulario
  resetPhoto.style.backgroundImage = 'url("https://place-hold.it/240x200/red")';
  resetMiniPhoto.innerHTML = ' ';
  //  cambiar los colores
  resetColor2.classList.remove('viewfinder--blue', 'viewfinder--red', 'viewfinder--grey');
  resetColor2.classList.add('viewfinder--blue');
  // cambiar las Fuentes
  resetFont.classList.remove('comic', 'ubuntu', 'montserrat');
  resetFont.classList.add('comic');

}
buttonReset.addEventListener('click', resetForm);

'use strict';

var mailInput = document.querySelector('.fill__input-mail');
var phoneInput = document.querySelector('.fill__input-phone');
var linkedinInput = document.querySelector('.fill__input-linkedin');
var githubInput = document.querySelector('.fill__input-github');

function transferValueToHref(event) {
  var guiltyElement = event.currentTarget;
  var targetID = guiltyElement.getAttribute('data-donde');
  var fillHref = document.querySelector('#' + targetID);

  if (guiltyElement.classList.contains('fill__input-mail')) {
    fillHref.href = 'mailto:' + guiltyElement.value;
  } else if (guiltyElement.classList.contains('fill__input-phone')){
    fillHref.href = 'tel: +34' + guiltyElement.value;
  } else if (guiltyElement.classList.contains('fill__input-linkedin')) {
    fillHref.href = 'https://www.linkedin.com/in/' + guiltyElement.value;
  } else {
    fillHref.href = 'https://github.com/' + guiltyElement.value;
  }
}

mailInput.addEventListener('keyup', transferValueToHref);
phoneInput.addEventListener('keyup', transferValueToHref);
linkedinInput.addEventListener('keyup', transferValueToHref);
githubInput.addEventListener('keyup', transferValueToHref);

//# sourceMappingURL=main.min.js.map
